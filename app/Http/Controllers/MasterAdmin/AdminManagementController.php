<?php

namespace App\Http\Controllers\MasterAdmin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use App\Enums\Department;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;

class AdminManagementController extends Controller
{
    public function __construct()
    {
        $this->middleware(function ($request, $next) {
            if (!auth()->check() || !auth()->user()->isMasterAdmin()) {
                abort(403, 'Access denied. Master Admin privileges required.');
            }
            return $next($request);
        });
    }

    /**
     * Display a listing of admin accounts
     */
    public function index()
    {
        $admins = User::where('role', 'admin')
                     ->orderBy('created_at', 'desc')
                     ->paginate(10);

        return view('master_admin.admin_management.index', compact('admins'));
    }

    /**
     * Show the form for creating a new admin account
     */
    public function create()
    {
        $departments = Department::getOptions();
        return view('master_admin.admin_management.create', compact('departments'));
    }

    /**
     * Store a newly created admin account
     */
    public function store(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'email' => 'required|string|email|max:255|unique:users',
            'password' => 'required|string|min:8|confirmed',
            'department' => ['required', Rule::in(Department::getAll())],
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                           ->withErrors($validator)
                           ->withInput();
        }

        // Auto-generate name based on department
        $departmentNames = [
            'BSIT' => 'BSIT Administrator',
            'BSHM' => 'BSHM Administrator',
            'BSAIS' => 'BSAIS Administrator',
            'BSTM' => 'BSTM Administrator',
            'BSOA' => 'BSOA Administrator',
            'BSENTREP' => 'BSENTREP Administrator',
            'BSBA' => 'BSBA Administrator',
            'BLIS' => 'BLIS Administrator',
            'BSCpE' => 'BSCpE Administrator',
            'BSP' => 'BSP Administrator',
            'BSCRIM' => 'BSCRIM Administrator',
            'BPED' => 'BPED Administrator',
            'BTLED' => 'BTLED Administrator',
            'BEED' => 'BEED Administrator',
            'BSED' => 'BSED Administrator',
            'MASTER ADMIN' => 'Master Administrator'
        ];

        $autoGeneratedName = $departmentNames[$request->department] ?? $request->name;

        User::create([
            'name' => $autoGeneratedName,
            'email' => $request->email,
            'password' => Hash::make($request->password),
            'role' => 'admin',
            'department' => $request->department,
        ]);

        return redirect()->route('master_admin.admin_management.index')
                        ->with('success', 'Admin account created successfully.');
    }

    /**
     * Display the specified admin account
     */
    public function show(User $admin_management)
    {
        if ($admin_management->role !== 'admin') {
            abort(404);
        }

        $admin = $admin_management;
        return view('master_admin.admin_management.show', compact('admin'));
    }

    /**
     * Show the form for editing the specified admin account
     */
    public function edit(User $admin_management)
    {
        if ($admin_management->role !== 'admin') {
            abort(404);
        }

        $admin = $admin_management;
        $departments = Department::getOptions();
        return view('master_admin.admin_management.edit', compact('admin', 'departments'));
    }

    /**
     * Update the specified admin account
     */
    public function update(Request $request, User $admin_management)
    {
        $admin = $admin_management;
        if ($admin->role !== 'admin') {
            abort(404);
        }

        $validator = Validator::make($request->all(), [
            'email' => 'required|string|email|max:255|unique:users,email,' . $admin->id,
            'password' => 'nullable|string|min:8|confirmed',
            'department' => ['required', Rule::in(Department::getAll())],
        ]);

        if ($validator->fails()) {
            return redirect()->back()
                           ->withErrors($validator)
                           ->withInput();
        }

        // Auto-generate name based on department
        $departmentNames = [
            'BSIT' => 'BSIT Administrator',
            'BSHM' => 'BSHM Administrator',
            'BSAIS' => 'BSAIS Administrator',
            'BSTM' => 'BSTM Administrator',
            'BSOA' => 'BSOA Administrator',
            'BSENTREP' => 'BSENTREP Administrator',
            'BSBA' => 'BSBA Administrator',
            'BLIS' => 'BLIS Administrator',
            'BSCpE' => 'BSCpE Administrator',
            'BSP' => 'BSP Administrator',
            'BSCRIM' => 'BSCRIM Administrator',
            'BPED' => 'BPED Administrator',
            'BTLED' => 'BTLED Administrator',
            'BEED' => 'BEED Administrator',
            'BSED' => 'BSED Administrator',
            'MASTER ADMIN' => 'Master Administrator'
        ];

        $autoGeneratedName = $departmentNames[$request->department] ?? $request->name;

        $updateData = [
            'name' => $autoGeneratedName,
            'email' => $request->email,
            'department' => $request->department,
        ];

        if ($request->filled('password')) {
            $updateData['password'] = Hash::make($request->password);
        }

        $admin->update($updateData);

        return redirect()->route('master_admin.admin_management.index')
                        ->with('success', 'Admin account updated successfully.');
    }

    /**
     * Remove the specified admin account
     */
    public function destroy(User $admin_management)
    {
        $admin = $admin_management;
        if ($admin->role !== 'admin') {
            abort(404);
        }

        $admin->delete();

        return redirect()->route('master_admin.admin_management.index')
                        ->with('success', 'Admin account deleted successfully.');
    }
}
